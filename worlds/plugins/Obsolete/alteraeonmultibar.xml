<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="DemonMUSH_Big_Gauges"
   author="Vivi"
   id="48062dcd6b934c590df53f67"
   language="Lua"
   purpose="Shows hp, mana, move, exp, and mob health in a mini window"
   date_written="2018-01-14 09:00"
   requires="4.40"
   version="2.0"
   save_state="y"
   >
<description trim="y">
<![CDATA[
Install this plugin to show an info bar with HP, Mana, Movement and EXP points shown as a bar.

The window can be dragged to a new location with the mouse.

Your prompt needs to be set like this:

prompt <%h/%H hp %m/%M m %v/%V mv %x xp>$n$n


]]>
</description>

</plugin>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   match="^kxwt_prompt (\d+)\s* (\d+)\s* (\d+)\s* (\d+)\s* (\d+)\s* (\d+)\s*$"
   regexp="y"
   script="do_prompt"
   sequence="100"
  >
  </trigger>
 <trigger
   enabled="y"
   match="^kxwt_exp (\d+)*$"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>exp = tonumber("%1")
  </send>
  </trigger>
<trigger
   enabled="y"
   match="^You need (\d+)* experience to level (\d+)*"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>max_exp = tonumber("%1")
  </send>
  </trigger>
<trigger
   enabled="y"
   match="^You need (\d+)* experience to micro level (\d+)*"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>max_exp = tonumber("%1")
  </send>
  </trigger>


</triggers>




<!--  Script  -->


<script>
<![CDATA[

require "movewindow"
require "gauge"
require "serialize"
require "checkplugin"


GAUGE_HEIGHT = 15

WINDOW_WIDTH = 740
WINDOW_HEIGHT = 82
NUMBER_OF_TICKS = 9

BACKGROUND_COLOUR = ColourNameToRGB "black"
FONT_COLOUR = ColourNameToRGB "white"
BORDER_COLOUR = ColourNameToRGB "#333333"

exp = 0
max_exp = 10000000




function DoGauge (sPrompt, current, max, Colour)

  if max <= 0 then 
    return 
  end -- no divide by zero
  
  -- fraction in range 0 to 1
  local Fraction = math.min (math.max (current / max, 0), 1) 
   
  local width = WindowTextWidth (win, font_id, sPrompt)
  
  WindowText (win, font_id, sPrompt, gauge_left - width, vertical, 0, 0, FONT_COLOUR)

  WindowRectOp (win, 2, gauge_left, vertical, WINDOW_WIDTH - 5, vertical + GAUGE_HEIGHT, 
                          BACKGROUND_COLOUR)  -- fill entire box
  
  local gauge_width = (WINDOW_WIDTH - gauge_left - 5) * Fraction
  
   -- box size must be > 0 or WindowGradient fills the whole thing 
  if math.floor (gauge_width) > 0 then
    
    -- top half
    WindowGradient (win, gauge_left, vertical, gauge_left + gauge_width, vertical + GAUGE_HEIGHT / 2, 
                    0x000000,
                    Colour, 2) 
    
    -- bottom half
    WindowGradient (win, gauge_left, vertical + GAUGE_HEIGHT / 2, 
                    gauge_left + gauge_width, vertical +  GAUGE_HEIGHT,   
                    Colour,
                    0x000000,
                    2) 

  end -- non-zero
  
  -- show ticks
  local ticks_at = (WINDOW_WIDTH - gauge_left - 5) / (NUMBER_OF_TICKS + 1)
  
  -- ticks
  for i = 1, NUMBER_OF_TICKS do
    WindowLine (win, gauge_left + (i * ticks_at), vertical, 
                gauge_left + (i * ticks_at), vertical + GAUGE_HEIGHT, ColourNameToRGB ("silver"), 0, 1)
  end -- for

  -- show actual exp in gauge

 WindowText (win, font_id, string.format ("%i/%i (%i%%)", current, max, Fraction * 100),
                             gauge_left + 3, vertical + 1, 0, 0, ColourNameToRGB ("black"))

 WindowText (win, font_id, string.format ("%i/%i (%i%%)", current, max, Fraction * 100),
                             gauge_left + 2, vertical + 1, 0, 0, ColourNameToRGB ("black"))

 WindowText (win, font_id, string.format ("%i/%i (%i%%)", current, max, Fraction * 100),
                             gauge_left + 1, vertical, 0, 0, ColourNameToRGB ("white"))



-- draw a box around it
  WindowRectOp (win, 1, gauge_left, vertical, WINDOW_WIDTH - 5, vertical + GAUGE_HEIGHT, 
          ColourNameToRGB ("lightgrey"))  -- frame entire box
  
  -- mouse-over information: add hotspot if not there
  if not WindowHotspotInfo(win, sPrompt, 1) then
    WindowAddHotspot (win, sPrompt, gauge_left, vertical, WINDOW_WIDTH - 5, vertical + font_height, 
                  "", "", "", "", "", "", 0, 0)
  end -- if
  
  -- store numeric values in case they mouse over it
  WindowHotspotTooltip(win, sPrompt, string.format ("%s\t%i / %i (%i%%)", 
                        sPrompt, current, max, Fraction * 100) )
                                  
  vertical = vertical + font_height + 3
end -- function DoGauge


function do_prompt (name, line, wildcards)

  hp, max_hp = tonumber (wildcards [1]), tonumber (wildcards [2])
  mana, max_mana = tonumber (wildcards [3]), tonumber (wildcards [4])
  move, max_move = tonumber (wildcards [5]), tonumber (wildcards [6])



  -- fill entire box to clear it
  check (WindowRectOp (win, 2, 0, 0, 0, 0, BACKGROUND_COLOUR))  -- fill entire box
  
  -- Edge around box rectangle
  check (WindowCircleOp (win, 3, 0, 0, 0, 0, BORDER_COLOUR, 0, 2, 0, 1))


  vertical = 6 -- pixel to start at
  DoGauge ("HP: ",    hp ,   max_hp,    ColourNameToRGB "darkgreen")
  DoGauge ("Mana: ",  mana,  max_mana,  ColourNameToRGB "blue")
  DoGauge ("Move: ",  move,  max_move,  ColourNameToRGB "gold")
 
  if max_exp ~= nil then
  DoGauge ("Exp: ", exp , max_exp, ColourNameToRGB "darkviolet")
else 
if lastlearn==nil or os.time() - lastlearn > 15 then 
Send("learn")
lastlearn=os.time()
end
  end 
     WindowShow (win, true)
  



  
end -- function do_prompt


function OnPluginInstall ()
  
  win = GetPluginID ()
  font_id = "fn"
  
  require "movewindow"  -- load the movewindow.lua module

   -- register with the z-order monitor
   CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win)

  -- install the window movement handler, get back the window position
 windowinfo = movewindow.install (win, miniwin.pos_top_right, miniwin.create_absolute_location, true)
                   
  font_name = "Fixedsys"    -- the font
    
  -- make miniwindow so I can grab the font info
  WindowCreate (win, 
                windowinfo.window_left,
                windowinfo.window_top,
                WINDOW_WIDTH, 
                WINDOW_HEIGHT,  
                windowinfo.window_mode,   
                windowinfo.window_flags,    
                BACKGROUND_COLOUR)

  -- add the drag handler so they can move the window around
  movewindow.add_drag_handler (win, 0, 0, 0, 0)
                 
  WindowFont (win, font_id, font_name, 9)
  font_height = WindowFontInfo (win, font_id, 1)  -- height
  
  -- work out how far in to start the gauge
  gauge_left =                        WindowTextWidth (win, font_id, "HP: ")
  gauge_left = math.max (gauge_left,  WindowTextWidth (win, font_id, "Mana: "))
  gauge_left = math.max (gauge_left,  WindowTextWidth (win, font_id, "Move: "))
  
  gauge_left = gauge_left + 5  -- allow gap from edge
  
  if GetVariable ("enabled") == "false" then
    ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
    check (EnablePlugin(GetPluginID (), false))
  end -- they didn't enable us last time
 
end -- OnPluginInstall

function OnPluginDisable ()
  WindowShow (win, false)
end -- OnPluginDisable

function OnPluginEnable ()
  WindowShow (win, true)
  
  -- draw gauge again if possible
  if hp and max_hp and mana and max_mana and move and max_move then
    do_prompt ("", "", { hp, max_hp, mana, max_mana, move, max_move } )
  end -- if know hp, endurance and guile
end -- OnPluginEnable

function OnPluginSaveState ()
   -- save window current location for next time  
  movewindow.save_state (win)
  SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
end -- OnPluginSaveState


]]>
</script>

</muclient>