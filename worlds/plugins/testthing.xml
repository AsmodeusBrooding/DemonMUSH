<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, July 03 2019 .06-pre -->

<!-- Plugin "CleftMUSH_Group_Window" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Status_Window"
   author="Asmodeus"
   id="7af79516b7e1b62a5cfed693"
   language="Lua"
   purpose="Status Window"
   date_written="2019-07-03 12:04:56"
   requires="5.00"
   version="1.1"
   >

</plugin>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   regexp="y"
   match="^.*'s group:$"
   keep_evaluating="y"
   script="start_group"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  <trigger
   group="group"
   enabled="n"
   regexp="y"
   keep_evaluating="y"
   match="^\[(\s+|)(?<level>\d+)\s+(?<tags>[^\s]+)\]\s+(?<name>.+)\s+(?<hp>\d+)\/(\s+|)(?<hp_max>\d+)\s+hp\s+(?<mana>\d+)\/(\s+|)(?<mana_max>\d+)\s+mana\s+(?<moves>\d+)\/(\s+|)(?<moves_max>\d+)\s+mv\s+(?<exp>\d+)\s+xp$"
   script="player_line"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   regexp="y"
   match="^(?<name>.+)'s group:$"
   keep_evaluating="y"
   script="my_name"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  <trigger
   group="group"
   enabled="n"
   regexp="y"
   match="^\[G_End\]$"
   script="end_group"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   regexp="y"
   match="^group$"
   enabled="y"
   sequence="100"
   script="toggle"
  >
  </alias>
  <alias
   regexp="y"
   match="^group minions$"
   enabled="y"
   sequence="100"
   script="toggle_minions"
  >
  </alias>
  <alias
   regexp="y"
   match="^fake$"
   enabled="y"
   sequence="100"
   script="simulate_group"
  >
  </alias>
</aliases>

<!--  Script  -->

<script>
<![CDATA[
require "movewindow"
require "gauge"
require "mw"
require "mw_theme_base"
require "tprint"


-- ^\[(?<level>\d+) (?<tags>[^\s]+)\] (?<name>.+)\s+(?<hp>\d+)\/(?<hp_max>\d+) hp \s+(?<mana>\d+)\/\s+(?<mana_max>\d+) mana\s+ (?<moves>\d+)\/\s+(?<moves_max>\d+) mv\s+(?<exp>\d+) xp$
-- kxwt_group_start
-- kxwt_group 65 65 119 119 156 156 XL Alas
-- kxwt_group_end
-- kxwt_group <hp> <hp_max> <mana> <mana_max> <move> <move_max> <tag> <name>

local group = {}

-- Tag 'X' - these are your stats.
-- Tag 'P' - this is a player.
-- Tag 'M' - this is one of your minions.
-- Tag 'O' - this is somebody else's minion.
-- Tag '?' - any other mob that doesn't fall into the categories above.

-- Tag 'L' - the group leader
-- Tag 'T' - in tanking mode
-- Tag 'N' - no-melee mode
-- Tag '-' - not present in the room with you

local to_bool = {["0"] = false, ["1"] = true}

local winid = "win_"..GetPluginID()
local myname = "" -- my name
local group_leader = "" -- group leader
local group_name = "" -- group name
local show_minions = to_bool[GetVariable("show_minions") or "1"] -- show minions
local bg_color = "#000000"
local title_bg_color = "#303030"
local border_color = "#303030"
local player_border_color = "#AAAAAA"
local title_color = "#FFFFFF" -- window title color
local player_color = "#CCCCCC" -- player name color
local leader_color = "#66ff33" -- leader tag color
local tank_color = "#ff3300" -- tank tag color
local minion_color = "#009999" -- minion tag color
local no_melee_color = "#cc00cc" -- no melee tag color
local other_color = "#ffff66" -- other mob color
local hp_label_color = "#00ff00" -- hp label color
local mana_label_color = "#3333ff" -- mana label color
local moves_label_color = "#ffff66" -- moves label color
--hp_label_color, mana_label_color, moves_label_color = "#DDDDDD", "#DDDDDD", "#DDDDDD"
local overlay_color = "#FFFFFF" -- % overlay color
local biggest_number = 1 -- biggest number for hp/mana/moves, to set player box size
local overlay_pct = to_bool[GetVariable("overlay_pct") or "1"] -- show % overlay
local show_numbers = to_bool[GetVariable("show_numbers") or "1"] -- show numbers after gauge
local show_mana = to_bool[GetVariable("show_mana") or "1"] -- show mana
local show_moves = to_bool[GetVariable("show_moves") or "1"] -- show moves
local last_refresh = 1 -- last window refresh
local pos_x = GetVariable("pos_x") or 100
local pos_y = GetVariable("pos_y") or 100
local font_size = 8
local font_name = "Lucida Console"
local window_visible = true -- always start out with visible window
local title = "Status"
local bar_height = 12 -- height of bars
local bar_width = tonumber(GetVariable("bar_width")) or 200 -- width of bars
local bar_ticks = 9 -- number of ticks to show on bar
local bar_border = "#777777"
local hp_color = GetVariable("hp_color") or "#00ff00" -- color of bar
local mana_color = GetVariable("mana_color") or "#3333ff" -- color of bar
local moves_color = GetVariable("moves_color") or "#ffff66" -- color of bar
local win_height = GetVariable("win_height") or 400
local win_width = GetVariable("win_width") or 440
local grip_resize = 10 -- resize grip size
function toggle()
	window_visible = not window_visible
	if not window_visible then -- remove window
		WindowDelete(winid)
	else
		window(true)
	end
end

function toggle_minions()
	show_minions = not show_minions
	window(false)
end

function start_group()
	EnableTriggerGroup("group", true)
	group = {}
end

function player_line(name, line, args)
	--tprint(args)
	table.insert(group, {hp = args.hp, hp_max = args.hp_max, mana = args.mana, mana_max = args.mana_max, moves = args.moves, moves_max = args.moves_max, tags = split(args.name, args.tags), name = args.name})
end

function my_name(name, line, args)
	myname = args.name
    group_leader = args.name
end

function prompt_line(name, line, args)
	if myname == "" then -- my name isnt set so dont try to update group stats
		Note("My name is not set yet. Going to toggle ctriggers. This probably only happens when re-installing the group plugin.")
		SendNoEcho("pbust Playername: %n")
		--SendNoEcho("set ctrigger on")
		return
	end
	for i, player in ipairs(group) do
		if string.lower(player.name) == string.lower(myname) then
			player.hp = args.hp
			player.hp_max = args.hp_max
			player.mana = args.mana
			player.mana_max = args.mana_max
			player.moves = args.moves
			player.moves_max = args.moves_max
			window(false)
			return
		end
	end
end

function end_group()
	EnableTriggerGroup("group", false)
	set_order() -- flag as minion, other, player
	get_biggest_number() -- get longest hp/mana/moves number to format box size
	table.sort(group, by_player)
	window(true)
end

function get_biggest_number()
	for i, player in ipairs(group) do
		if (not show_minions and player.minion < 1) or show_minions then
			if #player.hp_max > biggest_number then
				biggest_number = #player.hp_max
			end
			if #player.mana_max > biggest_number then
				biggest_number = #player.mana_max
			end
			if #player.moves_max > biggest_number then
				biggest_number = #player.moves_max
			end
		end
	end
end

function split(n, t)
	local tags = {}
	for i = 1, #t do
		local tag = string.sub(t, i, i)
		if tag == "L" then
			group_leader = n
		end
		table.insert(tags, tag)
	end
	return tags
end

function is_minion(tags)
	for i, tag in ipairs(tags) do
		if tag == "O" or tag == "M" then
			return true
		end
	end
	return false
end

function is_other(tags)
	for i, tag in ipairs(tags) do
		if tag == "?" then
			return true
		end
	end
	return false
end

function is_leader(tags)
	for i, tag in ipairs(tags) do
		if tag == "L" then
			return true
		end
	end
	return false
end

function is_no_melee(tags)
	for i, tag in ipairs(tags) do
		if tag == "N" then
			return true
		end
	end
	return false
end

function is_tank(tags)
	for i, tag in ipairs(tags) do
		if tag == "T" then
			return true
		end
	end
	return false
end

function set_order()
	for i, player in ipairs(group) do
		if is_minion(player.tags) then
			player.minion = 1
		elseif is_other(player.tags) then
			player.minion = 2
		else
			player.minion = 0
		end
	end
end

function by_player(a, b)
	return a.minion < b.minion
end

function window(redraw)
	if not window_visible then
		return
	end
	
	if redraw then
		--Note("redraw")
		WindowDelete("winid")
		WindowCreate(winid, pos_x, pos_y, win_width, win_height, 0, 0, ColourNameToRGB(bg_color))
		WindowPosition(winid, pos_x, pos_y, 0, 2)
		WindowSetZOrder(winid, 201)
		WindowFont(winid, "f1", font_name, font_size, false, false, false, false)
		WindowFont(winid, "b1", font_name, font_size, true, false, false, false)
		WindowFont(winid, "s1", font_name, font_size - 1, false, false, false, false)
		movewindow.install(winid, 6, 2, true, nil, {mouseup=MouseUp, mousedown=MouseDown, dragmove=LeftClickOnly, dragrelease=LeftClickOnly})
		movewindow.add_drag_handler (winid, 0, 0, 0, win_height)
		WindowAddHotspot(winid, "resize", win_width - grip_resize, win_height - grip_resize, win_width, win_height, "MouseOver", "CancelMouseOver", "MouseDown", "", "MouseUp", "", 6, 0)
		WindowDragHandler(winid, "resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)
	else
		WindowResize(winid, win_width, win_height, ColourNameToRGB(bg_color))
		WindowMoveHotspot(winid, "resize", win_width - grip_resize, win_height - grip_resize, win_width, win_height)
	end
	WindowShow(winid, true)
	show_group()
end

function trim(str)
	if str then
		return (str:gsub("^%s*(.-)%s*$", "%1"))
	else
		return ""
	end
end

function truncate(str)
	if #str <= 12 then
		return str
	end
	return trim(string.sub(str, 1, 10))..".."
end

function getColor(r1, g1, b1, r2, g2, b2)
  local out = {}

  -- set the base range of numbers (0 to high-low)
  local rRange = math.abs(r1 - r2)
  local gRange = math.abs(g1 - g2)
  local bRange = math.abs(b1 - b2)
	
  -- set the modifier for each color with a common random
  local rand = math.random()
  local rMod = rand * rRange
  local gMod = rand * gRange
  local bMod = rand * bRange

  if r1 < r2 then
    out.r = rMod + r1
  else
    out.r = r1 - rMod
  end
	
  if g1 < g2 then
    out.g = gMod + g1
  else
    out.g = g1 - gMod
  end
	
  if b1 < b2 then
    out.b = bMod + b1
  else
    out.b = b1 - bMod
  end

  return out
end

function MOD(a,b)
   return a - math.floor(a/b)*b
end
function DIV(a,b)
    return (a - a % b) / b
end

function show_group()

	WindowRectOp(winid, 2, 2, 1, -2, -2, ColourNameToRGB(bg_color)) -- blank canvas
	--WindowRectOp(winid, 2, 0, 0, 0, 22, ColourNameToRGB(title_bg_color)) -- title background
	--WindowRectOp(winid, 1, 0, 0, 0, 0, ColourNameToRGB(border_color)) -- border
	--Theme.Draw3DRect(winid, 0, 0, 0, 0, depressed) -- themed window
	

	Theme.DrawTitleBar(winid, "f1", title, "center") -- them window title (has to be drawn before border)
	Theme.DrawBorder(winid) -- theme window border
			
	local left, top = 7, 17 -- bar location
	local across = 0
	local rows = 0
    
    local border = 5
    
    local size = 32
    local x_max = DIV(win_width, size)
    
	for i, player in ipairs(group) do
        local x = MOD(i - 1, x_max)
        local y = DIV(i - 1, x_max)
        WindowRectOp(winid, 2, x * size, top + y * size, x * size + size, top + y * size + size, math.random(0xFFFFFF))
	end
			
	Theme.AddResizeTag(winid, 2, nil, nil, "MouseDown", "ResizeMoveCallback", "ResizeReleaseCallback") -- resize grip
end

function ResizeMoveCallback()
	--Note("ResizeMoveCallback")
	local x_offset, y_offset = start_x - WindowInfo(winid, 17), start_y - WindowInfo(winid, 18)
	start_x, start_y = WindowInfo(winid, 17), WindowInfo(winid, 18)
	win_width = win_width - x_offset
	win_height = win_height - y_offset
	if os.clock() - last_refresh >= .05 then
		--Note("redraw")
		last_refresh = os.clock()
		window(false)
	end
end

function ResizeReleaseCallback()
	--Note("ResizeReleaseCallback")
	window(true)
	SaveState()
end

function MouseDown(flags, id)
	--Note("MouseDown")
	if id == "resize" then
		start_x, start_y = WindowInfo(winid, 17), WindowInfo(winid, 18)
	end
end

function MouseUp(flags, id, win)
	--Note("MouseUp")
	if bit.band(flags, 0x20) ~= 0 then -- right click
		right_click_menu()
	end
	pos_x, pos_y = WindowInfo(winid, 10), WindowInfo(winid, 11)
	SaveState()
end

function right_click_menu()
	local x, y = WindowInfo(winid, 14), WindowInfo(winid, 15)

	local str = "!"
	
	if show_minions then
		str = str.."Hide Minions"
	else
		str = str.."Show Minions"
	end
	
	if show_mana then
		str = str.."|-|Hide Mana"
	else
		str = str.."|-|Show Mana"
	end
	
	if show_moves then
		str = str.."|Hide Moves"
	else
		str = str.."|Show Moves"
	end
	
	if bar_width == 200 then
		str = str.."|-|Compact Bars"
	else
		str = str.."|-|Full Size Bars"
	end
	
	str = str.."|-|>Colors|HP|Mana|Moves|<"
	
	if overlay_pct then
		str = str.."|-|Hide % Overlay"
	else
		str = str.."|-|Show % Overlay"
	end
	
	if show_numbers then
		str = str.."|-|Hide Totals"
	else
		str = str.."|-|Show Totals"
	end
	
	opt = WindowMenu(winid, x, y, str)
	
	if opt == "" then
		return
	end
	
	opt = tonumber(opt)
	
	if opt == 1 then -- toggle minions
		show_minions = not show_minions
		SaveState()
	elseif opt == 2 then -- toggle mana
		show_mana = not show_mana
		SaveState()
	elseif opt == 3 then -- toggle moves
		show_moves = not show_moves
		SaveState()
	elseif opt == 4 then -- 1/2 width bars
		if bar_width == 200 then
			bar_width = 100
		else
			bar_width = 200
		end
		SaveState()
	elseif opt == 5 then -- hp color
		local clr = PickColour(ColourNameToRGB(hp_color))
		if clr ~= -1 then
			hp_color = RGBColourToName(clr)
			SaveState()
		end
	elseif opt == 6 then -- mana color
		local clr = PickColour(ColourNameToRGB(mana_color))
		if clr ~= -1 then
			mana_color = RGBColourToName(clr)
			SaveState()
		end
	elseif opt == 7 then -- moves color
		local clr = PickColour(ColourNameToRGB(moves_color))
		if clr ~= -1 then
			moves_color = RGBColourToName(clr)
			SaveState()
		end
	elseif opt == 8 then -- overlay %
		overlay_pct = not overlay_pct
		SaveState()
	elseif opt == 9 then -- number totals after bar
		show_numbers = not show_numbers
		SaveState()
	end
	window(true)
end

function CancelMouseOver(flags, id)
	--Note("CancelMouseOver")
	-- nothing
end

function CancelMouseDown(flags, id)
	--Note("CancelMouseDown")
	-- nothing
end

function OnPluginEnable()
	--Note("enabled")
	window(true)
end

function OnPluginDisable()
	WindowDelete(winid)
end

function OnPluginClose()
	WindowDelete(winid)
end

function from_bool(v)
	if v then
		return 1
	end
	return 0
end

function OnPluginSaveState()
	SetVariable("pos_x", pos_x)
	SetVariable("pos_y", pos_y)
	SetVariable("win_width", win_width)
	SetVariable("win_height", win_height)
	SetVariable("show_minions", from_bool(show_minions)) -- show minions
	SetVariable("show_mana", from_bool(show_mana)) -- show mana
	SetVariable("show_moves", from_bool(show_moves)) -- show moves
	SetVariable("overlay_pct", from_bool(overlay_pct)) -- show % overlay
	SetVariable("show_numbers", from_bool(show_numbers)) -- show totals
	SetVariable("hp_color", hp_color) -- hp color
	SetVariable("mana_color", mana_color) -- mana color
	SetVariable("moves_color", moves_color) -- moves color
	SetVariable("bar_width", bar_width) -- bar width
end

function loaded()
	Note()
	ColourNote("darkmagenta", "white", " Cleft of Dimensions group plugin v"..GetPluginInfo(GetPluginID(), 19).." installed! ")
	Note()
end

-- SIMULATE STUFF
function simulate_group()
    for i = 1, 32, 1 do
	   table.insert(group, i)
	end
    show_group()
end
-- END SIMULATE STUFF

DoAfterSpecial(.2, "loaded()", 12)
window(true)
--simulate_group()


]]>
</script>

</muclient>