<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, July 03 2019 .06-pre -->

<!-- Plugin "CleftMUSH_Group_Window" generated by Plugin Wizard -->
<!-- Code frome Asmodeus, Nick Gammon -->
<muclient>
<plugin
name="Test_Window"
author="Elisius, Asmodeus"
id="353de94ba6c43260d839e238"
save_state="y"
language="Lua"
purpose="Test Window"
date_written="2019-07-03 12:04:56"
requires="5.00"
version="0.7"
>

</plugin>

<!--  Aliases  -->

<aliases>
  <alias
      regexp="y"
      match="^affects window$"
      enabled="y"
      sequence="100"
      script="Toggle"
      >
  </alias>
    <alias
      regexp="y"
      match="^affects test$"
      enabled="y"
      sequence="100"
	  send_to="12"
      ><send></send>
  </alias>
  <alias
      regexp="y"
      match="^affects window debug$"
      enabled="y"
      sequence="100"
      script="ToggleDebug"
      >
  </alias>
  <alias
      regexp="y"
      match="^affects window gag prompt"
      enabled="y"
      sequence="100"
      script="TogglePromptGag"
      >
  </alias>
</aliases>

<!--  Triggers  -->

<triggers>
<trigger
  enabled = "y"
  match = "[Last_Dir: * ]"
  regexp = "n"
  keep_evaluating = "y"
  sequence = "100"
  send_to="12"
><send>
prompt = {}
EnableTriggerGroup("CatchPrompt", true)</send>
</trigger>
<trigger
  enabled = "y"
  match = "[Room][*][ * ]"
  group="CatchTertiary"
  regexp = "n"
  keep_evaluating = "y"
  sequence = "100"
  send_to="12"
><send>EnableTriggerGroup("CatchPrompt", false)
DrawPromptWindow()</send>
</trigger>
<trigger
  enabled="y"
  match="^\| HP:(?P<hp>\d+)\/(?P<max_hp>\d+) \| MP:(?P<mana>\d+)\/(?P<max_mana>\d+) \| MV:(?P<move>\d+)\/(?P<max_move>\d+) \| Enemy:(None|.*) \| TNL:(?P<tnl>\d+) \| $"
  regexp="y"
  group="CatchTertiary"
  keep_evaluating="y"
  omit_from_output="y"
  name="mytrigger"
  script="TrgCatchPrompt"
  sequence="90"
  send_to="12"
><send>EnableTriggerGroup("CatchPrompt", false)
DrawPromptWindow()</send>
</trigger>

</triggers>

<!--  Script  -->

<script>
  <![CDATA[
	require "movewindow"
	require "mw"
	require "mw_theme_base"
	require "tprint"

	-- Miniwindow State
	local winid = "win_"..GetPluginID()
	local bg_color = "#000000"
	local title_bg_color = "#303030"
	local border_color = "#303030"
	local title_color = "#FFFFFF" -- window title color
	local last_refresh = 1 -- last window refresh
	local pos_x = GetVariable("pos_x") or 100
	local pos_y = GetVariable("pos_y") or 100
	local font_size = 12
	local font_name = "Fixedsys Excelsior 3.01"
	local window_visible = true -- always start out with visible window
	--local title = "Prompt Redirect"
	local win_height = tonumber(GetVariable("win_height")) or 400
	local win_width = tonumber(GetVariable("win_width")) or 440
	local grip_resize = 10 -- resize grip size
	local timer_color = Theme.BODY_TEXT
  font_height = win_height
	COOLDOWN_TEXT_COLOUR = ColourNameToRGB "yellow"
	tick_prefix = "This is a huge test:"

prompt = {}
	-- Global Vars
	infos = {}
    debug = GetVariable("debug") or false
    prompt_gag = GetVariable("prompt_gag") or false

    function TrgCatchPrompt(name, line, w, s)
      if line:sub(1, 4) == "kxwt" then
        return
      end
      table.insert(prompt, s)
    end
    function DrawPromptWindow()
  --    WindowRectOp(winid, miniwin.rect_fill, left, top -8, 0, 0, Theme.PRIMARY_BODY)
      DrawPrompt()
      Theme.AddResizeTag(winid, 1, nil, nil, "MouseDown", "ResizeMoveCallback", "ResizeReleaseCallback")
      Theme.DrawBorder(winid) -- theme window border
      CallPlugin("abc1a0944ae4af7586ce88dc", "BufferedRepaint")
    end


    function DrawPrompt()
    --  WindowRectOp(winid, 2, left, top -8, 0, 0, Theme.PRIMARY_BODY) -- blank canvas
      for i, line in ipairs(prompt) do
        DrawLine(i, line)
      end
    end


    function DrawLine(line, styles)
      local left = left
      local top = top -8--+ (line - 1) * font_height

      if not styles then
        return
      end

      for _, v in ipairs(styles) do
        local t = v.text
         WindowRectOp (winid, 2, left, top -8, 0, 0, v.backcolour)
        left = left + WindowText(winid, "font", t, left, top -8, 0, 0, v.textcolour)
      end
    end
	function NotifyNote(message)
	   ColourNote ("Green", "", message)
	end

	function ErrorNote(message)
	   ColourNote ("Red", "", message)
	end

	function DebugNote(message)
   if(debug) then
	   Note(message)
   end
	end

	function Toggle()
	   window_visible = not window_visible
   if not window_visible then -- remove window
	   WindowDelete(winid)
   else
	   window(true)
   end
	end

	function ToggleDebug()
	   debug = not debug
	   NotifyNote("Debug is now " .. tostring(debug))
	   SaveState()
	end

	function TogglePromptGag()
	   prompt_gag = not prompt_gag
	   stringified = not prompt_gag and "enabled" or "disabled"
	   NotifyNote("Prompts will now be " .. stringified)
	   SetupAffectTriggers()
	   SaveState()
	end

	function window(redraw)
	   DebugNote("window(" .. tostring(redraw) .. ")")
	   if not window_visible then
	      return
	   end

   if redraw then
	   WindowDelete("winid")
	   WindowCreate(winid, pos_x, pos_y, win_width, win_height, 0, 0, ColourNameToRGB(bg_color))
	   WindowPosition(winid, pos_x, pos_y, 0, 2)
	   WindowSetZOrder(winid, 201)
	   WindowFont(winid, "f1", font_name, font_size, false, false, false, false)
	   WindowFont(winid, "b1", font_name, font_size, true, false, false, false)
	   WindowFont(winid, "s1", font_name, font_size - 1, false, false, false, false)
	   movewindow.install(winid, 6, 2, true, nil, {mouseup=MouseUp, mousedown=MouseDown, dragmove=LeftClickOnly, dragrelease=LeftClickOnly})
	   -- register with the z-order monitor
	   CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", winid)
	   movewindow.add_drag_handler (winid, 0, 0, 0, win_height)
	   WindowAddHotspot(winid, "resize", win_width - grip_resize, win_height - grip_resize, win_width, win_height, "MouseOver", "CancelMouseOver", "MouseDown", "", "MouseUp", "", 6, 0)
	   WindowDragHandler(winid, "resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)
   else
	   WindowResize(winid, win_width, win_height, ColourNameToRGB(bg_color))
	   WindowMoveHotspot(winid, "resize", win_width - grip_resize, win_height - grip_resize, win_width, win_height)
   end
	   -- Redraw icons

	   WindowShow(winid, true)
	   show_window()
	   end



	function show_window()
	   WindowRectOp(winid, 2, 7, 17, 0, 0, Theme.PRIMARY_BODY) -- blank canvas
	   --WindowRectOp(winid, 2, 0, 0, 0, 22, ColourNameToRGB(title_bg_color)) -- title background
	   --WindowRectOp(winid, 1, 0, 0, 0, 0, ColourNameToRGB(border_color)) -- border
	   --Theme.Draw3DRect(winid, 0, 0, 0, 0, depressed) -- themed window

	--   title = "Prompt Redirect" -- default title

	 --  Theme.DrawTitleBar(winid, "f1", title, "center") -- them window title (has to be drawn before border) This is the title bar that says the leader name
	   Theme.DrawBorder(winid) -- theme window border
	   left, top = 7, 17 -- bar location
	   across = 0
	   rows = 0
	   Theme.AddResizeTag(winid, 2, nil, nil, "MouseDown", "ResizeMoveCallback", "ResizeReleaseCallback") -- resize grip
	   CallPlugin("abc1a0944ae4af7586ce88dc", "BufferedRepaint")
	end

	function ResizeMoveCallback()
	   --DebugNote("ResizeMoveCallback")
	   local x_offset, y_offset = start_x - WindowInfo(winid, 17), start_y - WindowInfo(winid, 18)
	   start_x, start_y = WindowInfo(winid, 17), WindowInfo(winid, 18)
	   win_width = win_width - x_offset
	   win_height = win_height - y_offset
   if os.clock() - last_refresh >= .05 then
	   --DebugNote("redraw")
	   last_refresh = os.clock()
	   window(false)
   end
	end

	function ResizeReleaseCallback()
	   --DebugNote("ResizeReleaseCallback")
	   window(true)
	   SaveState()
	end

	function MouseDown(flags, id)
	   --DebugNote("MouseDown")
   if id == "resize" then
	   start_x, start_y = WindowInfo(winid, 17), WindowInfo(winid, 18)
   end
	end

	function MouseUp(flags, id, win)
	   --DebugNote("MouseUp")
	   if bit.band(flags, 0x20) ~= 0 then -- right click
	      right_click_menu()
	   end
	   pos_x, pos_y = WindowInfo(winid, 10), WindowInfo(winid, 11)
	   SaveState()
	end

	function right_click_menu()
	   local x, y = WindowInfo(winid, 14), WindowInfo(winid, 15)

	   local str = "!"

	   str = str.."Bring to Front"

	   str = str.."|-|Send to Back"

	   opt = WindowMenu(winid, x, y, str)

	   if opt == "" then
	      return
	   end

	   opt = tonumber(opt)

   if opt == 1 then -- Bring to Front
	   CallPlugin("462b665ecb569efbf261422f","boostMe", winid)
	   --  print("Bring to Front")
	   SaveState()
   elseif opt == 2 then -- Send to back
	   CallPlugin("462b665ecb569efbf261422f","dropMe", winid)
	   --  print("Sent to Back")
	   SaveState()
   end
	   window(true)
    end

	function CancelMouseOver(flags, id)
	   --DebugNote("CancelMouseOver")
	   -- nothing
	end

	function CancelMouseDown(flags, id)
	   --DebugNote("CancelMouseDown")
	   -- nothing
	end

	function SaveState()
	   SetVariable("pos_x", pos_x)
	   SetVariable("pos_y", pos_y)
	   SetVariable("win_width", win_width)
	   SetVariable("win_height", win_height)
	   SetVariable("debug", tostring(debug))
	   SetVariable("prompt_gag", tostring(prompt_gag))
	end
	function TogglePromptGag()
	   prompt_gag = not prompt_gag
	   stringified = not prompt_gag and "enabled" or "disabled"
	   NotifyNote("Prompts will now be " .. stringified)
	   SetupAffectTriggers()
	   SaveState()
	end


	function OnPluginInstall()
	   WindowFont(winid, "font", font_name, font_size, false, false, false, false, 0)
	   window(true)
	end

	function OnPluginEnable()
	   window(true)
	end

	function OnPluginDisable()
	   WindowDelete(winid)
	end

	function OnPluginClose()
	   WindowDelete(winid)
	end

	function OnPluginConnect()
	   DebugNote("OnPluginConnect")
	end

	function OnPluginSaveState()
	   SaveState()
	end

	function OnPluginWorldSave()
	   SaveState()
	end

	function OnPluginDisable()
	   SaveState()
	end

	function OnPluginDisconnect()
	   SaveState()
	end


	-- For saving state when reloading w/ bast's plugins plugin
	function OnPluginListChanged()
	   SaveState()
	end

	window(true)
    ]]>
</script>

</muclient>
