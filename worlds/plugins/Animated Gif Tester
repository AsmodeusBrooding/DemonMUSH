<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, June 17, 2019, 8:08 PM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "bloot_odds" generated by Plugin Wizard -->

<muclient>
<plugin
   name="AnimatedGifTest"
   author="Asmodeus"
   id="ca81c6d49fc8651517f995ab"
   language="Lua"
   purpose="Does Animated Gifs"
   save_state="y"
   date_written="2019-06-17 20:07:58"
   requires="5.06"
   version="1.0"
   >
   <description trim="n">
   		<![CDATA[
.----------------------------------------------------------------------------.
|                           Animated gif shit. :D                            |
|----------------------------------------------------------------------------|
| lets do this                                                               | 
'----------------------------------------------------------------------------'
]]>
</description>
</plugin>


<aliases>
  <alias regexp="n" match="drawtest" enabled="y" send_to="14"><send>draw_affects()</send></alias>
  <alias regexp="n" match="testgif" enabled="y" send_to="14"><send>test()</send></alias>
  <alias regexp="y" match="^gif window$" enabled="y" script="toggleWindow" ignore_case="y" sequence="100"></alias>
  <alias regexp="y" match="^gif window reset$" enabled="y" script="ResetWindow" ignore_case="y" sequence="100"></alias>
</aliases>
<triggers>
</triggers>

<timers>
  <timer
    script="PlayGifFrame"
    enabled="y"
    second="0.1"
    active_closed="y"
  >

  </timer>
</timers>

<include name="constants.lua"/>

<script>
<![CDATA[
   require "serialize"
   require "commas"
   require "mw_theme_base"

   -- Window related variables
   local z_order_plugin = "462b665ecb569efbf261422f"
	local dragStart = nil	
	local window = {}	


-- --------------------------------------------------------------------
-- PlayGif (info)
--  info.filename (eg. "/frames/my_Gif_%03i.png" )
--  info.frames   (eg. 10, if the Gif consists of 10 files)
--  info.x   - X position on screen
--  info.y   - Y position on screen

--  Suggested conversion:
--    ffmpeg -ss "00:30" -i INPUTFILE.mp4 -t 1     -r 10 -s 720x404 frames/my_Gif_%03i.png
--                ^^^^          ^^^       ^^^^     ^^^^^    ^^^^^^^    ^^^^^^^^^^
--           Start time      input file  how long   FPS       size      output files
-- --------------------------------------------------------------------
function PlayGifMoti (info)
  MotiGifInfo = info

  if not info then
    return
  end -- if

  assert (type (GifInfo) == "table",
          "Argument to PlayGif should be a table")

  local gotErrors = false

  -- load each Gif frame into memory, if not already done
  for i = 1, GifInfo.frames do
    local filename = string.format (GifInfo.filename, i)
    if not WindowImageInfo(window.id, filename, 2) then
       local result = WindowLoadImage(window.id, filename, filename)
       if result ~= error_code.eOK then
         ColourNote ("Red", "", "Could not open move frame file:")
         ColourNote ("Red", "", "   -> " .. filename)
         ColourNote ("Red", "", "   Reason: " .. error_desc [result])
         gotErrors = true
       end -- if
    end -- if
  end -- for each frame

  -- if couldn't do it, discard the Gif info
  if gotErrors then
    GifInfo = nil
    return
  end -- if

  -- otherwise, start at frame 1
  MotiGifInfo.currentFrame = 1

end -- PlayGif

function PlayGiftest (info)
  testGifInfo = info

  if not info then
    return
  end -- if

  assert (type (GifInfo) == "table",
          "Argument to PlayGif should be a table")

  local gotErrors = false

  -- load each Gif frame into memory, if not already done
  for i = 1, GifInfo.frames do
    local filename = string.format (GifInfo.filename, i)
    if not WindowImageInfo(window.id, filename, 2) then
       local result = WindowLoadImage(window.id, filename, filename)
       if result ~= error_code.eOK then
         ColourNote ("Red", "", "Could not open move frame file:")
         ColourNote ("Red", "", "   -> " .. filename)
         ColourNote ("Red", "", "   Reason: " .. error_desc [result])
         gotErrors = true
       end -- if
    end -- if
  end -- for each frame

  -- if couldn't do it, discard the Gif info
  if gotErrors then
    GifInfo = nil
    return
  end -- if

  -- otherwise, start at frame 1
  testGifInfo.currentFrame = 1

end -- PlayGif


-- --------------------------------------------------------------------
-- PlayGifFrame - called by a timer every 1/10 second - show current frame, advance count
-- --------------------------------------------------------------------
function PlayGifFrame (timerName)

  -- if no current Gif, do nothing
  if not GifInfo then
    return
  end -- if

  -- timing stuff
  timeTaken = timeTaken or 0
  frameCount = frameCount or 0

  local startTime = utils.timer ()
  local filename = string.format (GifInfo.filename, GifInfo.currentFrame)
  if WindowDrawImage (window.id, filename, GifInfo.x, GifInfo.y, 0, 0,
                      miniwin.image_copy) ~= error_code.eOK then
     ColourNote ("Orange", "", "Could not draw image: " .. imageName)
  end -- if
  Redraw () -- force screen update

  -- next frame
  GifInfo.currentFrame = GifInfo.currentFrame + 1
  -- wrap
  if GifInfo.currentFrame > GifInfo.frames then
    GifInfo.currentFrame = 1
  end -- if

  -- add up how long we took doing this
  timeTaken = timeTaken + utils.timer () - startTime
  -- and how many times
  frameCount = frameCount + 1
end -- PlayGifFrame


-------------------------------------------------------------------------------------------
---- THIS IS WHERE ANIMATED GIF STUFF IS ENGAGING
------------------------------------------------------------------------------------------- 
function test()
  PlayGiftest {
            filename = "worlds\\plugins\\images\\frames\\my_movie_%03i.png",
            frames = 2,
            x = 10,
            y = 10,
            }
end

function moti()
  PlayGifMoti {
            filename = "worlds\\plugins\\images\\frames\\my_movie_%03i.png",
            frames = 2,
            x = 10,
            y = 10,
            }
end
-------------------------------------------------------------------------------------------


   function Help()
		ColourNote("orange", "black", GetPluginInfo (GetPluginID (), 3))
   end
   
   function OnPluginInstall()

			SetWindowDefaults() -- load window defaults


		InitializeWindow()				
      Help()
   end

   function OnPluginClose()
		DeleteWindow()
   end

      	-- window functions

local AffectIcon = {}
local AffectName = {}
local AffectType = {}
local AffectDuration = {}
local AffectMax = 0

function init_affects (data)

  index = 0
  startpos = 1
  max = 0
  for i=1,string.len(data),1 do
    if string.byte(data,i) == 3 or i == string.len(data) then
      if string.byte(data,i) == 3 then
        endpos = 1
      else
        endpos = 0
      end -- if
      variable = string.sub(data,startpos,i-endpos)
      startpos = i+1
      index = index + 1

      pos1 = string.find(variable, ",")
      if pos1 ~= nil then
        pos2 = string.find(variable, ",", pos1+1)
        if pos2 ~= nil then
          pos3 = string.find(variable, ",", pos2+1)
        end -- if
        if pos3 ~= nil then
          AffectIcon[index] = string.sub(variable, 1, pos1-1)..".png"
          AffectType[index] = string.sub(variable, pos1+1, pos2-1)
          AffectName[index] = string.sub(variable, pos2+1, pos3-1)
          AffectDuration[index] = string.sub(variable, pos3+1)
        end -- if
      else -- we've only got the duration
        AffectDuration[index] = variable
      end -- if
    end -- if
  end -- for

  -- AffectMax is the highest EVER number - we need to keep track of all created icons
  if index < AffectMax then
    for i=index+1,AffectMax,1 do
      AffectIcon[i] = nil
      win = "affect_window_"..i
      WindowShow (win, false)
    end -- for
    AffectMax = index
  elseif index > AffectMax then
    AffectMax = index
  end -- if

end -- function

 
function draw_affects ()

  affects = msdp["AFFECTS"]
  if affects == nil or affects == "None" then
    for i=1,AffectMax,1 do
      WindowShow ("affect_window_"..i, false)
    end -- for
    AffectMax = 0
    return
  end -- if

  init_affects (affects)

  offset_x = 0
  offset_y = 0

  for i=1,AffectMax,1 do
    if AffectIcon[i] ~= nil then
      win = "affect_window_"..i
      affect = "affect_"..i

      -- draw the icons left to right, top to bottom
      if i > 1 then
        if offset_x == 0 then
          offset_x = 36
        else
          offset_x = 0
          offset_y = offset_y + 36
        end -- if
      end -- if

      -- spell type: No dispel, permanent, good, bad
      if AffectType[i] == "1" then
        colour = ColourNameToRGB ("cyan")
      elseif AffectType[i] == "2" then
        colour = ColourNameToRGB ("blue")
      elseif AffectType[i] == "3" then
        colour = ColourNameToRGB ("magenta")
      elseif AffectType[i] == "4" then
        colour = ColourNameToRGB ("red")
      else -- default, we shouldn't hit this but just in case.
        colour = border_colour
      end -- if

      -- make a miniwindow under the text
      check (WindowCreate (win,   -- window ID
                    5+offset_x,   -- left
                    121+offset_y, -- top
                    34,           -- width
                    34,           -- depth
                    12,           -- center it (ignored anyway) 
                    2,            -- draw underneath (1) + absolute location (2)
                    colour))      -- background colour


      -- load the icon background image if possible
      if WindowLoadImage (win, affect, GetInfo (66) .. "images/layout/affect_background.png") == eOK then
        check (WindowDrawImage (win, affect, 0, 0, 0, 0, 1))  -- draw it
      end -- if

      -- load the icon
      if WindowLoadImage (win, affect, GetInfo (66) .. "images/affects/" .. AffectIcon[i]) == eOK then
        check (WindowDrawImage (win, affect, 3, 3, 31, 31, 2))  -- draw the icon
      elseif WindowLoadImage (win, affect, GetInfo (66) .. "images/affects/001.png") == eOK then
        check (WindowDrawImage (win, affect, 3, 3, 31, 31, 2))  -- draw the default icon instead
      else -- even the default spell icon is missing
        Note( "Missing spell icons.")
        return
      end -- if

      -- create the pie-shape - based on an example by Nick Gammon
      timer = tonumber(AffectDuration[i])
      if timer > 0 and timer < 60 then
        percent = timer / 60.0
        tempwin = GetPluginID() .. ":temp"
        backgroundColour = ColourNameToRGB ("white")

        -- for drawing cooldowns (window not visible)
        WindowCreate (tempwin, 
                   3, 3,   -- left, top 
                   28,     -- width
                   28,     -- height
                   12,     -- position mode
                   0,      -- flags
                   backgroundColour) 

        -- calculate pie end point
        endx = (math.cos(math.rad (percent * 360 + 90)) * 28) + 14
        endy = (-1 * math.sin(math.rad (percent * 360 + 90)) * 28) + 14

        -- clear temporary window
        Theme.Draw3DRect (tempwin, 2, 0, 0, 0, 0, 0xFFFFFF)  -- fill with white

        -- draw the pie showing amount of cooldown
        WindowCircleOp (tempwin, 5, -10, -10, 38, 38,   -- pie
              0x000000, 5, 0,   -- no pen
              0x000000, 0,      -- solid brush, black
              14, 0,            -- from 12 o'clock position
              endx, endy)

        -- turn pie shape into an image
        WindowImageFromWindow(win, "mask", tempwin)

        -- blend in (darken mode) with 50% opacity
        WindowBlendImage(win, "mask", 
                         3, 3, 31, 31,  -- rectangle
                         1, 0.3)       -- mode and opacity
      end -- if

      if tonumber(AffectDuration[i]) < 10 then
        offset = 9
      elseif tonumber(AffectDuration[i]) < 100 then
        offset = 5
      else -- two digits
        offset = 1
      end -- if

      if tonumber(AffectDuration[i]) < 0 then
        -- draw an infinity symbol
--        outlined_text (colour, win, "O", 12, offset-3, 7)
--        outlined_text (colour, win, "O", 12, offset+7, 7)
        outlined_text (colour, win, "O", 6, 4, 21)
        outlined_text (colour, win, "O", 6, 9, 21)
        -- go over the first 'O' again, removing the outline from the second 'O'
--        WindowFont(win,'f','Times New Roman',12,1,0,0,0)
--        WindowText(win,'f',"O",offset-3,7,0,0,colour,0)
        WindowFont(win,'f','Times New Roman',6,1,0,0,0)
        WindowText(win,'f',"O",4,21,0,0,colour,0)
      else -- write the duration
--        outlined_text (colour, win, AffectDuration[i], 12, 4+offset, 7)
        outlined_text (colour, win, AffectDuration[i], 6, 4, 21)
      end -- if

      -- show the window
      WindowShow (win, true)

      -- create a hotspot over the timer
      WindowAddHotspot(win, "hs_affect_"..i, 0, 0, 34, 34, "", "", "", "", "", AffectName[i], 1, 0)
    end -- if
  end -- for

end -- draw_affects

	function Draw(win)
		-- miniwin background and outline
		Theme.Draw3DRect(win.id, miniwin.rect_fill , 0, 0, win.width, win.height, ColourNameToRGB(window.backgroundColor))	
		Theme.Draw3DRect(win.id, miniwin.rect_3d_rect , 0, 0, win.width, win.height, ColourNameToRGB(window.borderColor), ColourNameToRGB(window.borderColor))		
        Theme.DrawBorder(win.id) -- theme window border		
		
		-- resize bars
		WindowLine(win.id, win.width-3,  win.height-2, win.width-2, win.height-3, ColourNameToRGB(window.borderColor), 0, 2)
		WindowLine(win.id, win.width-4,  win.height-2, win.width-2, win.height-4, ColourNameToRGB(window.backgroundColor), 0, 1)
		WindowLine(win.id, win.width-6,  win.height-2, win.width-2, win.height-6, ColourNameToRGB(window.borderColor), 0, 2)
		WindowLine(win.id, win.width-7,  win.height-2, win.width-2, win.height-7, ColourNameToRGB(window.backgroundColor), 0, 1)
		WindowLine(win.id, win.width-9,  win.height-2, win.width-2, win.height-9, ColourNameToRGB(window.borderColor), 0, 2)
		WindowLine(win.id, win.width-10, win.height-2, win.width-2, win.height-10, ColourNameToRGB(window.backgroundColor), 0, 1)
		WindowLine(win.id, win.width-12, win.height-2, win.width-2, win.height-12, ColourNameToRGB(window.borderColor), 0, 2)
		WindowLine(win.id, win.width-13, win.height-2, win.width-2, win.height-13, ColourNameToRGB(window.backgroundColor), 0, 1)
		
      -- Where the magic happens. Draw all the things!
      local line = 0
      local total = 0

      end
   

	function InitializeWindow()
		WindowCreate(window.id, window.left, window.top, window.width, window.height, miniwin.pos_center_all, miniwin.create_keep_hotspots, ColourNameToRGB(window.backgroundColor))
		WindowFont(window.id, window.font, window.fontFamily, window.fontSize, false, false, false, false, 1, 0)
		WindowPosition(window.id, window.left, window.top, miniwin.pos_stretch_to_view, miniwin.create_absolute_location)	

		CreateHotSpots()
		
		if (window.show) then
			WindowShow(window.id, window.show)				
			if (IsPluginInstalled(z_order_plugin) and GetPluginInfo(z_order_plugin, 17)) then
				CallPlugin(z_order_plugin, "boostMe", window.id)
			end
			Draw(window)
		end	
	end
	
	function DeleteWindow()
		WindowDelete(window.id)
   end

   function toggleWindow()
      if window.show == true then
         HideWindow()
         ColourNote("silver", "", "Bonus loot mini window has been ", "red", "", "DISABLED")
      else
         ShowWindow()
         ColourNote("silver", "", "Bonus loot mini window has been ", "lime", "", "ENABLED")
      end
   end
	
	function ShowWindow()
		window.show = true
		WindowShow(window.id, true)
		if (IsPluginInstalled(z_order_plugin) and GetPluginInfo(z_order_plugin, 17)) then
			CallPlugin(z_order_plugin, "boostMe", window.id)
		end
		Draw(window)
		SaveWindow()	
	end
	
	function HideWindow()
		window.show = false
		WindowShow(window.id, false)
		Draw(window)
		SaveWindow()
	end	
	
	function SaveWindow()
		SetVariable("window", serialize.save_simple(window))
	end	
	
	function SetWindowDefaults()
		window = {
			id = "window_" .. GetPluginID(),
			top = 10,
			left = 10,
			width = 200,
			height = 50,
			show = true,
			font = "defaultFont",
			fontFamily = "Fixedsys",
			fontSize = 9,
			fontColor = "white",
			borderColor = "lightgray",
			backgroundColor = "black"
		}
	end
	
	function ResetWindow()
		SetWindowDefaults()		
		SaveWindow()	
		InitializeWindow()				
      Draw(window)
      ColourNote("silver", "", "Bonus loot mini window position/etc has been reset.")
	end
	
	function CreateHotSpots()
		WindowDeleteAllHotspots(window.id)
	
		WindowAddHotspot(window.id, "DragArea", 0, 0, window.width-13, window.height-13, 
			"", "", "", "", "mouseup", "Drag to move", miniwin.cursor_both_arrow, 0)
		WindowDragHandler(window.id, "DragArea", "dragmove", "dragrelease", 0)	

		WindowAddHotspot(window.id, "DragAreaBottom", 0, window.height-13, window.width-13, window.height, 
			"", "", "", "", "mouseup", "Drag to move", miniwin.cursor_both_arrow, 0)
		WindowDragHandler(window.id, "DragAreaBottom", "dragmove", "dragrelease", 0)	

		WindowAddHotspot(window.id, "DragAreaRight", window.width-13, 0, window.width, window.height-13, 
			"", "", "", "", "mouseup", "Drag to move", miniwin.cursor_both_arrow, 0)
		WindowDragHandler(window.id, "DragAreaRight", "dragmove", "dragrelease", 0)			
		
		WindowAddHotspot(window.id, "Resize", 
			window.width-13, window.height-13, window.width-2, window.height-2,
			"", "", "", "", "mouseup", "Drag to resize", miniwin.cursor_nw_se_arrow, 0)
			Theme.AddResizeTag(window.id, 2, nil, nil, "dragmove", "resizemove", "resizerelease") -- resize grip
		--WindowDragHandler(window.id, "Resize", "resizemove", "resizerelease", 0) 
	end
	
	-- Handlers
	function dragmove(flags, hotspot_id)							
		if (not dragStart) then
			dragStart = {
				x = WindowInfo(window.id, 14),
				y = WindowInfo(window.id, 15),
			}
		end		
		
		WindowPosition(window.id, 
						WindowInfo (window.id, 17) - dragStart.x, 
						WindowInfo (window.id, 18) - dragStart.y, 
						miniwin.pos_stretch_to_view, 
						miniwin.create_absolute_location)
	end

	function dragrelease(flags, hotspot_id)		
		window.left = WindowInfo(window.id, 10)
		window.top = WindowInfo(window.id, 11)
		
		dragStart = nil
		
		SaveWindow()
	end
	
	function resizemove(flags, hotspot_id) 
		window.width = WindowInfo(window.id, 17) - WindowInfo(window.id, 10)
		window.height = WindowInfo(window.id, 18) - WindowInfo(window.id, 11)
		
		WindowResize(window.id, window.width, window.height, ColourNameToRGB("gray"))
		WindowShow(window.id, true)
	end -- dragmove

	function resizerelease(flags, hotspot_id)
		SaveWindow()
				
		CreateHotSpots()
		
		Draw(window)
	end -- dragrelease
	
	function mouseup(flags, hotspot_id)		
		if (bit.band(flags, miniwin.hotspot_got_rh_mouse) ~= 0) then
			local result = WindowMenu(window.id, 
				WindowInfo(window.id, 14),
				WindowInfo(window.id, 15),
				"Bring to front|Send to back")		
			
			if (result ~= "" and IsPluginInstalled(z_order_plugin) and GetPluginInfo(z_order_plugin, 17)) then
				if (result == "Send to back") then 
					CallPlugin(z_order_plugin, "dropMe", window.id)
				else
					CallPlugin(z_order_plugin, "boostMe", window.id)
				end
			end
		end
	end

]]>
</script>


</muclient>