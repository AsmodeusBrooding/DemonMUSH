<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient [
  <!ENTITY show_database_mods "true" > 
  <!ENTITY speedwalk_prefix "" > 
  <!ENTITY debugging "false" > 
]>

<muclient>
<plugin
   name="Cleft_of_Dimensions_Mapper"
   author="Asmodeus and Nick Gammon"
   id="7c54b861a8cd3c4745c28834"
   language="Lua"
   purpose="Mapper for Cleft of Dimensions"
   save_state="y"
   date_written="2019-07-02"
   requires="4.61"
   version="1.0"
   >

<description trim="y">
<![CDATA[
AUTOMATIC MAPPER ...  by Nick Gammon

ACTIONS

mapper help         --> this help  (or click the "?" button on the bottom right)
mapper zoom out     --> zoom out   (or use the mouse-wheel)
mapper zoom in      --> zoom in    (or use the mouse-wheel)
mapper hide         --> hide map
mapper show         --> show map
mapper find <text>  --> search 
mapper where <room> --> show directions to a room by ID (can specify part ID)
mapper goto <room>  --> walk to a room by its room ID


]]>
</description>

</plugin>

<aliases>
  <alias
   match="mapper help"
   script="OnHelp"
   enabled="y"
  >
  </alias>

 <!--  zooming aliases -->

  <alias
   match="mapper zoom out"
   enabled="y"
   sequence="100"
   omit_from_command_history="y"
   omit_from_output="y"
   script="mapper.zoom_out"
  >
  </alias>

<alias
   match="mapper zoom in"
   enabled="y"
   sequence="100"
   omit_from_command_history="y"
   omit_from_output="y"
   script="mapper.zoom_in"
  >
  </alias>
<alias
   match="^mapper addnote( .*)?$"
   regexp="y"
   enabled="y"
   sequence="100"
   send_to="12"
>
<send>
   room_edit_note(nil,nil,Trim("%1"))
</send>
</alias>
<alias
   match="^mapper next( .*)?$"
   enabled="y"
   regexp="y"
   sequence="100"
   send_to="12"
>
<send>
mapper.gotoNextResult(Trim("%1"))
</send>
</alias>  
 <alias
   match="mapper stop"
   enabled="y"
   sequence="100"
   script="mapper.cancel_speedwalk"
  >
  </alias>

 <!--  show/hide mapper -->

  <alias
   match="mapper hide"
   enabled="y"
   sequence="100"
   script="mapper.hide"
  >
  </alias>

   <alias
   match="mapper show"
   enabled="y"
   sequence="100"
   script="mapper.show"
  >
  </alias>
<alias
   match="^mapper help( (.*))?$"
   enabled="y"
   regexp="y"
   script="OnHelp"
></alias>

<alias
   match="^mapper updown$"
   enabled="y"
   regexp="y"
   send_to="12"
>
<send>
   mapper.show_up_down = not mapper.show_up_down
   mapper.draw (current_room)
</send>
</alias>

<alias
   match="^mapper underlines?$"
   enabled="y"
   regexp="y"
   send_to="12"
>
<send>
   NoUnderline_hyperlinks = not NoUnderline_hyperlinks
   Note("Mapper hyperlinks will " ..(NoUnderline_hyperlinks and "no longer" or "now").." be underlined.")
   SetVariable("NoUnderline_hyperlinks", NoUnderline_hyperlinks and "1" or "0")
</send>
</alias>
    
 <alias
   match="mapper where *"
   enabled="y"
   sequence="100"
   script="map_where"
  >
  
  </alias>  

 <alias
   match="mapper goto *"
   enabled="y"
   sequence="100"
   script="map_goto"
  >
  
  </alias>  
  
 <alias
   match="mapper *"
   enabled="y"
   sequence="110"
   send_to="12"
  >
  <send>
    mapper.maperror ("Unknown mapper command: %1")
    OnHelp ()
  </send>  
  </alias>    
      
</aliases>
  
<triggers>

 <!--  Things which prevent us moving  -->

  <trigger
   enabled="y"
   match="*"
   script="check_for_cannot_go"
   keep_evaluating="y"
   sequence="1"
  >
  </trigger>
  
  <trigger
   enabled="y"
   keep_evaluating="y"
   match="^\s*[a-zA-Z]"
   name="got_room_name"
   script="process_room_name"
   regexp="y"
   sequence="100"
>
  </trigger>
  <trigger
     enabled="y"
     match="(] Exits: * [)"
     name="got_exits1"
     sequence="100"
     send_to="14"
    >
<send>
print("Exits: ", exits)
EnableTrigger("got_description_line", false)
</send>
  </trigger>
  <trigger
     enabled="y"
     match="[Exits: * ]"
     name="got_exits2"
     sequence="100"
     send_to="14"
    >
<send>end_of_description("%1")
</send>
  </trigger>
  <trigger
   enabled="n"
   keep_evaluating="y"
   match="&lt;*"
   script="got_prompt"
   sequence="100"
   send_to="14"
  >
  </trigger>
  
  <trigger
     keep_evaluating="y"
     match="*"
     name="got_description_line"
     script="process_description_line"
     sequence="100"
>
  </trigger>

  <trigger
     enabled="y"
     match="[Room][*][ * ]"
     name="got_name_terrain"
     sequence="100"
     send_to="14"
    >
<send>
terrain="%1"
room_name="%2"
print("Name: ", room_name)
print("Terrain: ", terrain)
print("ExitsONPROMPT: ", exits)
print("DescEOD: ", room_description)</send>
  </trigger> 
</triggers>

<!--  Script  -->

<script>

local show_database_mods = &show_database_mods;
local speedwalk_prefix = "&speedwalk_prefix;"
local debugging = &debugging;


<![CDATA[

-- mapper module
mapper = require "cleftmapper"
require "serialize"  -- needed to serialize table to string
require "copytable"



-- all the rooms we have come across
rooms = {}
local posx = GetVariable("posx") or 100
local posy = GetVariable("posy") or 100
height = GetVariable("height") or 97
width = GetVariable("width") or 740
expected_exit=-666
from_room=0

terrain = 0
current_room=0
local user_terrain_colour = {}
terrain_color = {}
OUR_ROOM_COLOUR = tonumber(GetVariable("OUR_ROOM_COLOUR")) or 0x0000FF


-- -----------------------------------------------------------------
-- these commands will be considered "room changing" commands
-- -----------------------------------------------------------------
local valid_direction = {
  n = "n",
  s = "s",
  e = "e",
  w = "w",
  u = "u",
  d = "d",
  ne = "ne",
  sw = "sw",
  nw = "nw",
  se = "se",
  north = "n",
  south = "s",
  east = "e",
  west = "w",
  up = "u",
  down = "d",
  northeast = "ne",
  northwest = "nw",
  southeast = "se",
  southwest = "sw",
  ['in'] = "in",
  out = "out",
  }  -- end of valid_direction
  
-- for calculating the way back
local inverse_direction = {
  n = "s",
  s = "n",
  e = "w",
  w = "e",
  u = "d",
  d = "u",
  ne = "sw",
  sw = "ne",
  nw = "se",
  se = "nw",
  ['in'] = "out",
  out = "in",
  }  -- end of inverse_direction
  
local cannot_move_messages = { }

-- put messages from the MUD which stop you moving here ...
for _, v in ipairs {

    "You are too exhausted.",
    "You take a running start and slam head first into a wall.",
    "WHAM! Face first into the wall! Good one spaz.",
    "THUD! Your sore face suggests there wasn't a secret passage there afterall.",
    "You aren't allowed in there.",
    "Alas, you cannot go that way.",
    "In your dreams, or what?",
    "You stumble all over yourself trying to do in that direction.",
    "The door is closed.",
    "You huff and puff trying to go that way, but, alas, you can't!.",
    "No way!  You are still fighting!",
    "You need a boat to go there.",
"You slam face-first into the door on your way *.  WHAM!",
"You almost go *, but suddenly realize that the door is closed.",
    
-- add more here

    } do cannot_move_messages [v] = true end
      
-- -----------------------------------------------------------------
-- mapper 'get_room' callback - it wants to know about room uid
-- -----------------------------------------------------------------
function get_room (uid)
  
  if not rooms [uid] then 
   return nil
  end -- if
 
  local room = copytable.deep (rooms [uid])


  if string.find (room.name:lower (), "%f[%a]shop%f[%A]") then
      room.fillcolour = mapper.SHOP_FILL_COLOUR.colour
      room.fillbrush = 8
  end -- if
      
  -- draw current room in bolder colour  
  if uid == current_room then
    current_area = room.area
  end -- if
  room.area = "Cleft of Dimensions"  -- assume every room is in this area
  
  -- build hover message
  local texits = {}
  for dir in pairs (room.exits) do
    table.insert (texits, dir)
  end -- for
  table.sort (texits)
  

  room.hovermessage = string.format (
      "%s\tExits: %s\nRoom: %s\n\n%s",
      room.name, 
      table.concat (texits, ", "),
      uid:sub (1, 5),
      room.description
      )
      
	    -- SPECIAL ROOM COLOUR FILLS
special_room = false
                         if room.info and room.info ~= "" then
                         if string.match (room.info, "waypoint") then
                                         special_room = true
                         elseif string.match (room.info, "bank") then
                                         special_room = true
                         elseif string.match (room.info, "alchemyguild") then
                                         special_room = true
                         elseif string.match (room.info, "teacher") then
                                         special_room = true
                         elseif string.match (room.info, "employer") then
                                         special_room = true
                         elseif string.match (room.info, "priest") then
                                         special_room = true
                         elseif string.match (room.info, "forge") then
                                         special_room = true
		                 elseif string.match (room.info, "warriortrainer") then
                                         special_room = true
				         elseif string.match (room.info, "thieftrainer") then
                                         special_room = true
				         elseif string.match (room.info, "druidtrainer") then
                                         special_room = true
		                 elseif string.match (room.info, "clerictrainer") then
                                         special_room = true
				         elseif string.match (room.info, "magetrainer") then
                                         special_room = true
				         elseif string.match (room.info, "necromancertrainer") then
                                         special_room = true		
				         elseif string.match (room.info, "rangertrainer") then
                                         special_room = true								 								 
                 
			end
            end -- if
					     if uid == current_room and special_room then
                                         room.bordercolour = mapper.OUR_ROOM_COLOUR.colour
                                         room.borderpenwidth = 3		 
   elseif room.area ~= current_area then
    room.bordercolour = ColourNameToRGB "red"
  end -- not in this area	
        
  return room
end -- get_room

-- -----------------------------------------------------------------
-- Plugin Install
-- -----------------------------------------------------------------
function OnPluginInstall ()
  config = {}  -- in case not found
setup_terrain_colors()

  -- get saved configuration
  assert (loadstring (GetVariable ("config") or "")) ()
  -- initialize mapper
  mapper.init { 
            config     = config,   -- ie. colours, sizes
            get_room   = get_room, -- info about room (uid)
            show_help  = OnHelp,   -- to show help
            speedwalk_prefix = speedwalk_prefix,  -- how to speedwalk
 --           room_click = room_click,    -- called on RH click on room square
              }
               
  mapper.mapprint (string.format ("CleftMUSH mapper installed, version %0.1f", mapper.VERSION))
  
  -- on plugin install, convert variable into Lua table

  assert (loadstring (GetVariable ("rooms") or "")) ()
  
  assert (rooms, "Uh oh, no rooms table.")
  
end -- OnPluginInstall

-- -----------------------------------------------------------------
-- Plugin Help
-- -----------------------------------------------------------------
function OnHelp ()
  mapper.mapprint (string.format ("[MUSHclient mapper, version %0.1f]", mapper.VERSION))
  mapper.mapprint (world.GetPluginInfo (world.GetPluginID (), 3))
end


function our_room_colour ()
		local clr = PickColour(OUR_ROOM_COLOUR or 0)
		if clr ~= -1 then
			OUR_ROOM_COLOUR = clr
            mapper.OUR_ROOM_COLOUR.colour = clr
			SaveState()
		end
end

function room_click (uid, flags)

   -- check we got room at all
   if not uid then
      return nil
   end -- if

   -- look it up
   local room = rooms [uid]

   -- not cached - see if in database
   if not room then
return
   end -- not in cache

   if not room then
      return
   end -- if still not there

  local function checkmark (which)
    if rooms [uid] [which] then
      return "+"
    else
      return ""
    end -- if
  end -- checkmark


  local handlers = {
      { name = "Edit bookmark", func = room_edit_bookmark} ,
      { name = "-", } ,
      { name = "Add Exit",    func = room_add_exit} ,
      { name = "Change Exit", func = room_change_exit} ,
      { name = "Delete Exit", func = room_delete_exit} ,
      { name = "-", } ,
      { name = checkmark ("shop")  .. "Shop",         func = room_toggle_shop } ,
      { name = checkmark ("train") .. "Trainer",      func = room_toggle_train } ,
      { name = checkmark ("inn")   .. "Inn",          func = room_toggle_inn } ,
      { name = checkmark ("guild") .. "Guildmaster",  func = room_toggle_guild } ,
      { name = "-", } ,
      { name = "Current Room Border Color", func = our_room_colour} ,
     } -- handlers

  local t, tf = {}, {}
  for _, v in pairs (handlers) do
    table.insert (t, v.name)
    tf [v.name] = v.func
  end -- for

  local choice = WindowMenu (mapper.win,
                            WindowInfo (mapper.win, 14),
                            WindowInfo (mapper.win, 15),
                            table.concat (t, "|"))

  local f = tf [choice]

  if f then
    f (room, uid)
  end -- if handler found

end -- room_click

-- -----------------------------------------------------------------
-- end_of_description : we believe this is the end of the room description
-- -----------------------------------------------------------------
function end_of_description (exits_str)


    exits = {}
   
  for exit in string.gmatch (exits_str, "%w+") do
    local ex = valid_direction [exit]
    if ex then
      exits [ex] = "-666"  -- don't know where it goes yet
    end -- if
  end -- for

  EnableTrigger ("got_description_line", false)
  EnableTrigger ("got_room_name", true)
  
  if not current_description or #current_description == 0 then
    if debugging then
      ColourNote ("yellow", "", "No description")
    end -- if
    return
  end -- if
  
  if not exits then
    if debugging then
      ColourNote ("yellow", "", "No exits")
    end -- if
    return
  end -- if
  
  room_description = table.concat (current_description, "\n")
  
  exits_str = table.concat (exits, ",")
  
  -- generate a "room ID" by hashing the room name, description and exits
    
  uid = utils.tohex (utils.md5 (room_name .. room_description .. exits_str .. terrain))
  uid = uid:sub (1, 25)  

  if debugging then
    ColourNote ("cyan", "", room_description)
    ColourNote ("darkorange", "", "last_direction_moved = " .. (last_direction_moved or "none"))
    ColourNote ("darkorange", "", "current_room = " .. (current_room or "none"))
  end -- if
  
  -- assume we know the room name by now
  -- add to rooms table if not there
  if not rooms [uid] then
   rooms [uid] = { name = room_name, description = room_description, exits = exits, area=area, fillcolour=terrain_color[terrain], fillbrush=0, bordercolour=0xffffff }
    

---------------------------------------------------------------------------------------------
-- ADD ROOMS TO SAVE STATE --
---------------------------------------------------------------------------------------------
  
  -- if we changed rooms assume that our last movement sent us here
  if uid ~= current_room 
        and current_room
        and last_direction_moved then
    -- previous room led here
    if rooms [current_room] then
      if rooms [current_room].exits [last_direction_moved] ~= uid and show_database_mods then
        mapper.mapprint ("Fixed exit ", last_direction_moved, "from", current_room, "to here in database")
 end -- if
      rooms [current_room].exits [last_direction_moved] = uid 
    end -- if
    -- assume inverse direction leads back
    rooms [uid].exits [inverse_direction [last_direction_moved]] = current_room
  end -- if
  
     -- this is now our current room
  current_room = uid
    
  -- remove exits the room had, but now no longer has
  for k, v in pairs (rooms [uid].exits) do
   if not exits [k] then
     rooms [uid].exits [k] = nil
     if show_database_mods then
        mapper.mapprint ("Removing exit: " .. k)
      end -- if
    end -- if
  end -- for each exit this room has

  -- add in exits we know about but which aren't there
  for k, v in pairs (exits) do
    if not rooms [uid].exits [k] then
      rooms [uid].exits [k] = 0
      if show_database_mods then
        mapper.mapprint ("Adding exit: " .. k)
      end -- if
   end -- if
  end -- for
     
  -- draw this room
  mapper.draw (uid)
print("Name: ", room_name)
print("Terrain: ", terrain)
print("Desc: ", room_description)
print("Current Room: ", current_room)
print("UID: ", uid)
print("Last Dir: ", last_direction_moved)
print("Exits: ", exits)
print("From Room: ", from_room)

  --last_direction_moved = nil

   try to work out where previous room's exit led  
  if expected_exit == "-666" and from_room then
   fix_up_exit ()
  end -- exit was wrong

  
end -- end_of_description

-- -----------------------------------------------------------------
-- Here on prompt
-- -----------------------------------------------------------------
function got_prompt (name, line, wildcards)

  if debugging then
    ColourNote ("yellow", "", "got_prompt")
  end -- if
  
  --end_of_description ()
 

end -- got_prompt


-- -----------------------------------------------------------------
-- Here on room name
-- -----------------------------------------------------------------
function process_room_name (name, line, wildcards, styles)
  local name = line

  if debugging then
    ColourNote ("yellow", "", "process_room_name: " .. name)
  end -- if
    
  -- ignore exits lines
  if string.match (name, "^%[Exits: .* ]") then
    return
  end -- if
  
  -- ignore really long lines
  if #name > 50 then
    return
  end -- if
  
  room_name = name
  
  EnableTrigger ("got_description_line", true)
  EnableTrigger ("got_room_name", false)
  
  current_description = {}
  just_got_room_name = true
end -- got_room_name

-- -----------------------------------------------------------------
-- process_description_line : Here on one line of the description
-- -----------------------------------------------------------------
function process_description_line (name, line, wildcards)

  if Trim (line) == "" then
    return
  end -- if
  
  if debugging then
    ColourNote ("yellow", "", "process_description_line: " .. line)
  end -- if
  
  if not current_description then
    ColourNote ("yellow", "", "No current description")
  end -- if
  
  if just_got_room_name then
  
    -- false alarm!
    if line:sub (1, 2) ~= "  " then
      just_got_room_name = false
      EnableTrigger ("got_description_line", false)
      current_description = nil
      exits = nil
      terrain = nil
     room_name = nil
      return       
     end -- if
    
  end -- if
  
  just_got_room_name = false
  
  -- add to the current description
  if Trim (line) ~= "" then
    table.insert (current_description, line)  
  end -- if
  
end -- process_description_line

function fix_up_exit ()

  -- where we were before
  local room = rooms [from_room]
  
  -- leads to here
  room.exits [last_direction_moved] = current_room
    
  -- clear for next time
  last_direction_moved = nil
  from_room = nil
  
end -- fix_up_exit


-- -----------------------------------------------------------------
-- try to detect when we send a movement command
-- -----------------------------------------------------------------
function OnPluginSent (sText)
  if valid_direction [sText] then
    last_direction_moved = valid_direction [sText]
    -- Note("Just moved", last_direction_moved)
    if current_room and rooms [current_room] then
      expected_exit = rooms [current_room].exits [last_direction_moved]
      if expected_exit then
        from_room = current_room
      end -- if
    -- Note("expected exit for this direction is to room", expected_exit)
    end -- if
  end -- if 
end -- function





-- -----------------------------------------------------------------
-- OnPluginSaveState - save rooms info
-- -----------------------------------------------------------------
function OnPluginSaveState ()
  mapper.save_state ()
  SetVariable ("config", "config = " .. serialize.save_simple (config))
  SetVariable ("rooms", "rooms = " .. serialize.save_simple (rooms))
SetVariable("OUR_ROOM_COLOUR", OUR_ROOM_COLOUR) -- Color of Room Border
end -- OnPluginSaveState

-- -----------------------------------------------------------------
-- map_find - find stuff
-- -----------------------------------------------------------------
function map_find (name, line, wildcards)
 
  local found_rooms = {}
  local count = 0
  local wanted = wildcards [1]:lower ()
  
  -- find matching rooms
  for k, v in pairs (rooms) do
    if string.find (v.description:lower (), wanted, 1, true)
    or string.find (v.name:lower (), wanted, 1, true) then
      found_rooms [k] = true
      count = count + 1
    end -- if
  end   -- finding room
  
  -- see if nearby
  mapper.find (
    function (uid) 
      local room = found_rooms [uid] 
      if room then
        found_rooms [uid] = nil
      end -- if
      return room, next (found_rooms) == nil
    end,  -- function
    show_vnums,  -- show vnum?
    count,      -- how many to expect
    false       -- don't auto-walk
    )
  
end -- map_find

-- -----------------------------------------------------------------
-- cannot_walk - we tried to walk but failed
-- -----------------------------------------------------------------
function cannot_walk (name, line, wildcards)
  mapper.cancel_speedwalk ()
  current_description = nil
  exits = nil
  room_name = nil
  just_got_room_name = false
  last_direction_moved = nil
  terrain = nil
  if show_database_mods then
    mapper.mapprint ("Attempt to walk cancelled.")
  end -- if
  
end -- cannot_walk

-- -----------------------------------------------------------------
-- map_goto - go to a room
-- -----------------------------------------------------------------
function map_goto (name, line, wildcards)

  local wanted = wildcards [1]:upper ()
  
  if #wanted < 3 then
      mapper.mapprint ("Specify at least 3 characters of room ID.")
      return
  end -- if
  
  if current_room and string.find (current_room:upper (), "^" .. wanted) then
    mapper.mapprint ("You are already in that room.")
    return
  end -- if
  
  -- find desired room
  mapper.find (
    function (uid) 
      local found = string.find (uid:upper (), "^" .. wanted)
      return found,  -- wanted room?
             found  -- stop searching?
    end,  -- function
    show_vnums,  -- show vnum?
    1,          -- how many to expect
    true        -- just walk there
    )
        
end -- map_goto

-- -----------------------------------------------------------------
-- map_where - where is a room
-- -----------------------------------------------------------------
function map_where (name, line, wildcards)

  if not mapper.check_we_can_find () then
    return
  end -- if

  local wanted = wildcards [1]:upper ()
  
  if #wanted < 3 then
      mapper.mapprint ("Specify at least 3 characters of room ID.")
      return
  end -- if

  if current_room and string.find (current_room:upper (), "^" .. wanted) then
    mapper.mapprint ("You are already in that room.")
    return
  end -- if
  
  local paths = mapper.find_paths (current_room, 
           function (uid) 
             local found = string.find (uid:upper (), "^" .. wanted)
             return found,  -- wanted room?
                    found  -- stop searching?
            end)

  local uid, item = next (paths, nil) -- extract first (only) path
  
  -- nothing? room not found
  if not item then
    mapper.mapprint (string.format ("Room %s not found", wanted))
    return
  end -- if
  
  -- turn into speedwalk
  local path = mapper.build_speedwalk (item.path)
  
  -- display it
  mapper.mapprint (string.format ("Path to %s is: %s", wanted, path))
  
end -- map_where


function setup_terrain_colors()
terrain_color["0"]=tonumber("0x000000")--NOTSET
terrain_color["inside"]=tonumber("0x606060")--Inside
terrain_color["city"]=tonumber("0x907040")--City
terrain_color["field"]=tonumber("0x00ff00")--Field
terrain_color["forest"]=tonumber("0x008000")--Forest
terrain_color["hills"]=tonumber("0x409040")--Hills
terrain_color["mountain"]=tonumber("0xc0c0c0")--Mountain
terrain_color["mount2"]=tonumber("0x406080")--Mount2
terrain_color["swim"]=ColourNameToRGB("blue")--Swim
terrain_color["water"]=ColourNameToRGB("blue")--Swim
terrain_color["noswim"]=ColourNameToRGB("darkblue")--NoSwim
terrain_color["unused"]=tonumber("0xc0c0c0")--Unused
terrain_color["air"]=tonumber("0x808080")--Air
terrain_color["desert"]=tonumber("0x00ffff")--Desert (proper color)
terrain_color["swamp"]=tonumber("0x406080")--Swamp
terrain_color["road"]=ColourNameToRGB("saddlebrown")--Road
terrain_color["enter"]=tonumber("0x606060")--Enter   
terrain_color["snow"]=ColourNameToRGB("navajowhite")--Snow
terrain_color["rock"]=tonumber("0x808080")--Rock
terrain_color["jungle"]=tonumber("0x20c040")--Jungle
terrain_color["ruins"]=tonumber("0x806060")--Ruins
terrain_color["coastline"]=ColourNameToRGB("blue")--Coastal
terrain_color["developed"]=tonumber("0x021e6c")--Developed
terrain_color["void"]=tonumber("0x303030")--Void
terrain_color["lava"]=ColourNameToRGB("red")--Lava

 -- end of terrain_color
end

-- -----------------------------------------------------------------
-- check_for_cannot_go - look up the line in a table of failure messages
-- see table: cannot_move_messages
-- -----------------------------------------------------------------
function check_for_cannot_go (name, line, wildcards)
  if cannot_move_messages [line] then
    cannot_walk ()
  end -- if
end -- check_for_cannot_go



]]>
</script>
</muclient>