<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, July 03 2019 .06-pre -->

<!-- Plugin "CleftMUSH_Group_Window" generated by Plugin Wizard -->

<muclient>
<plugin
   name="CleftMUSH_Affects_Window"
   author="Asmodeus"
   id="353de94ba6c43260d839e256"
   language="Lua"
   purpose="Affects Window"
   date_written="2019-07-03 12:04:56"
   requires="5.00"
   version="5.76"
   >

</plugin>

<!--  Triggers  -->

<triggers>
 
</triggers>

<timers>
  <timer
    name="test"
    script="PlayGifFrame"
    enabled="y"
    second="0.1"
    active_closed="y"
  >

  </timer>
<timer
    name="moti"
    script="PlayGifFrameMoti"
    enabled="y"
    second="0.1"
    active_closed="y"
  >

  </timer>
</timers>


<!--  Aliases  -->

<aliases>
  <alias
   regexp="y"
   match="^affects window$"
   enabled="y"
   sequence="100"
   script="toggle"
  >
  </alias>
    <alias 
	regexp="n" 
	match="testgif" 
	enabled="y" 
	send_to="14">
	<send>
	test()
	</send>
	</alias>
	    <alias 
	regexp="n" 
	match="gif moti" 
	enabled="y" 
	send_to="14">
	<send>
	moti()
	</send>
	</alias>


</aliases>

<!--  Script  -->

<script>
<![CDATA[
require "movewindow"
require "mw"
require "mw_theme_base"


local winid = "win_"..GetPluginID()
local bg_color = "#000000"
local title_bg_color = "#303030"
local border_color = "#303030"
local title_color = "#FFFFFF" -- window title color
local last_refresh = 1 -- last window refresh
local pos_x = GetVariable("pos_x") or 100
local pos_y = GetVariable("pos_y") or 100
local font_size = 8
local font_name = "Lucida Console"
local window_visible = true -- always start out with visible window
local title = "Affects Window"
local win_height = GetVariable("win_height") or 400
local win_width = GetVariable("win_width") or 440
local grip_resize = 10 -- resize grip size

function toggle()
	window_visible = not window_visible
	if not window_visible then -- remove window
		WindowDelete(winid)
	else
		window(true)
	end
end


-- --------------------------------------------------------------------
-- PlayGif (info)
--  info.filename (eg. "/frames/my_Gif_%03i.png" )
--  info.frames   (eg. 10, if the Gif consists of 10 files)
--  info.x   - X position on screen
--  info.y   - Y position on screen

--  Suggested conversion:
--    ffmpeg -ss "00:30" -i INPUTFILE.mp4 -t 1     -r 10 -s 720x404 frames/my_Gif_%03i.png
--                ^^^^          ^^^       ^^^^     ^^^^^    ^^^^^^^    ^^^^^^^^^^
--           Start time      input file  how long   FPS       size      output files
-- --------------------------------------------------------------------
function PlayGif (info)
  GifInfo = info

  if not info then
    return
  end -- if

  assert (type (GifInfo) == "table",
          "Argument to PlayGif should be a table")

  local gotErrors = false

  -- load each Gif frame into memory, if not already done
  for i = 1, GifInfo.frames do
    local filename = string.format (GifInfo.filename, i)
    if not WindowImageInfo(winid, filename, 2) then
       local result = WindowLoadImage(winid, filename, filename)
       if result ~= error_code.eOK then
         ColourNote ("Red", "", "Could not open move frame file:")
         ColourNote ("Red", "", "   -> " .. filename)
         ColourNote ("Red", "", "   Reason: " .. error_desc [result])
         gotErrors = true
       end -- if
    end -- if
  end -- for each frame

  -- if couldn't do it, discard the Gif info
  if gotErrors then
    GifInfo = nil
    return
  end -- if

  -- otherwise, start at frame 1
  GifInfo.currentFrame = 1

end -- PlayGif



-- --------------------------------------------------------------------
-- PlayGifFrame - called by a timer every 1/10 second - show current frame, advance count
-- --------------------------------------------------------------------
function PlayGifFrame (timerName)

  -- if no current Gif, do nothing
  if not GifInfo then
    return
  end -- if

  -- timing stuff
  timeTaken = timeTaken or 0
  frameCount = frameCount or 0

  local startTime = utils.timer ()
  local filename = string.format (GifInfo.filename, GifInfo.currentFrame)
  if WindowDrawImage (winid, filename, GifInfo.x, GifInfo.y, 0, 0,
                      miniwin.image_copy) ~= error_code.eOK then
     ColourNote ("Orange", "", "Could not draw image: " .. imageName)
  end -- if
  Redraw () -- force screen update

  -- next frame
  GifInfo.currentFrame = GifInfo.currentFrame + 1
  -- wrap
  if GifInfo.currentFrame > GifInfo.frames then
    GifInfo.currentFrame = 1
  end -- if

  -- add up how long we took doing this
  timeTaken = timeTaken + utils.timer () - startTime
  -- and how many times
  frameCount = frameCount + 1
end -- PlayGifFrame


function PlayGifMoti (info)
  MotiInfo = info

  if not info then
    return
  end -- if

  assert (type (MotiInfo) == "table",
          "Argument to PlayGif should be a table")

  local gotErrors = false

  -- load each Gif frame into memory, if not already done
  for i = 1, MotiInfo.frames do
    local filename = string.format (MotiInfo.filename, i)
    if not WindowImageInfo(winid, filename, 2) then
       local result = WindowLoadImage(winid, filename, filename)
       if result ~= error_code.eOK then
         ColourNote ("Red", "", "Could not open move frame file:")
         ColourNote ("Red", "", "   -> " .. filename)
         ColourNote ("Red", "", "   Reason: " .. error_desc [result])
         gotErrors = true
       end -- if
    end -- if
  end -- for each frame

  -- if couldn't do it, discard the Gif info
  if gotErrors then
    MotiInfo = nil
    return
  end -- if

  -- otherwise, start at frame 1
  MotiInfo.currentFrame = 1

end -- PlayGif



-- --------------------------------------------------------------------
-- PlayGifFrame - called by a timer every 1/10 second - show current frame, advance count
-- --------------------------------------------------------------------
function PlayGifFrameMoti (timerName)

  -- if no current Gif, do nothing
  if not MotiInfo then
    return
  end -- if

  -- timing stuff
  timeTaken = timeTaken or 0
  frameCount = frameCount or 0

  local startTime = utils.timer ()
  local filename = string.format (MotiInfo.filename, MotiInfo.currentFrame)
  if WindowDrawImage (winid, filename, MotiInfo.x, MotiInfo.y, 0, 0,
                      miniwin.image_copy) ~= error_code.eOK then
     ColourNote ("Orange", "", "Could not draw image: " .. imageName)
  end -- if
  Redraw () -- force screen update

  -- next frame
  MotiInfo.currentFrame = MotiInfo.currentFrame + 1
  -- wrap
  if MotiInfo.currentFrame > MotiInfo.frames then
    MotiInfo.currentFrame = 1
  end -- if

  -- add up how long we took doing this
  timeTaken = timeTaken + utils.timer () - startTime
  -- and how many times
  frameCount = frameCount + 1
end -- PlayGifFrame

-------------------------------------------------------------------------------------------
---- THIS IS WHERE ANIMATED GIF STUFF IS ENGAGING
------------------------------------------------------------------------------------------- 
function test()
  PlayGif {
            filename = "worlds\\plugins\\images\\frames\\my_movie_%03i.png",
            frames = 2,
            x = 5, -- width
            y = 17, -- height
            }
end

function moti()
  PlayGifMoti {
            filename = "worlds\\plugins\\images\\frames\\mr.moti_%03i.png",
            frames = 8,
            x = 5, -- width
            y = 60, -- height
            }
end
-------------------------------------------------------------------------------------------

function window(redraw)
	if not window_visible then
		return
	end

	if redraw then
		--Note("redraw")
		WindowDelete("winid")
		WindowCreate(winid, pos_x, pos_y, win_width, win_height, 0, 0, ColourNameToRGB(bg_color))
		WindowPosition(winid, pos_x, pos_y, 0, 2)
		WindowSetZOrder(winid, 201)
		WindowFont(winid, "f1", font_name, font_size, false, false, false, false)
		WindowFont(winid, "b1", font_name, font_size, true, false, false, false)
		WindowFont(winid, "s1", font_name, font_size - 1, false, false, false, false)
		movewindow.install(winid, 6, 2, true, nil, {mouseup=MouseUp, mousedown=MouseDown, dragmove=LeftClickOnly, dragrelease=LeftClickOnly})
    -- register with the z-order monitor
CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", winid)
		movewindow.add_drag_handler (winid, 0, 0, 0, win_height)
		WindowAddHotspot(winid, "resize", win_width - grip_resize, win_height - grip_resize, win_width, win_height, "MouseOver", "CancelMouseOver", "MouseDown", "", "MouseUp", "", 6, 0)
		WindowDragHandler(winid, "resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)
	else
		WindowResize(winid, win_width, win_height, ColourNameToRGB(bg_color))
		WindowMoveHotspot(winid, "resize", win_width - grip_resize, win_height - grip_resize, win_width, win_height)
	end
	WindowShow(winid, true)
	show_window()
end


function show_window()
    WindowRectOp(winid, 2, 2, 1, -2, -2, ColourNameToRGB(bg_color)) -- blank canvas
    --WindowRectOp(winid, 2, 0, 0, 0, 22, ColourNameToRGB(title_bg_color)) -- title background
    --WindowRectOp(winid, 1, 0, 0, 0, 0, ColourNameToRGB(border_color)) -- border
    --Theme.Draw3DRect(winid, 0, 0, 0, 0, depressed) -- themed window

    title = "Affects Window" -- default title

    Theme.DrawTitleBar(winid, "f1", title, "center") -- them window title (has to be drawn before border) This is the title bar that says the leader name
    Theme.DrawBorder(winid) -- theme window border

    left, top = 7, 17 -- bar location
    across = 0
    rows = 0
    Theme.AddResizeTag(winid, 2, nil, nil, "MouseDown", "ResizeMoveCallback", "ResizeReleaseCallback") -- resize grip
end

function ResizeMoveCallback()
	--Note("ResizeMoveCallback")
	local x_offset, y_offset = start_x - WindowInfo(winid, 17), start_y - WindowInfo(winid, 18)
	start_x, start_y = WindowInfo(winid, 17), WindowInfo(winid, 18)
	win_width = win_width - x_offset
	win_height = win_height - y_offset
	if os.clock() - last_refresh >= .05 then
		--Note("redraw")
		last_refresh = os.clock()
		window(false)
	end
end

function ResizeReleaseCallback()
	--Note("ResizeReleaseCallback")
	window(true)
	SaveState()
end

function MouseDown(flags, id)
	--Note("MouseDown")
	if id == "resize" then
		start_x, start_y = WindowInfo(winid, 17), WindowInfo(winid, 18)
	end
end

function MouseUp(flags, id, win)
	--Note("MouseUp")
	if bit.band(flags, 0x20) ~= 0 then -- right click
		right_click_menu()
	end
	pos_x, pos_y = WindowInfo(winid, 10), WindowInfo(winid, 11)
	SaveState()
end

function right_click_menu()
	local x, y = WindowInfo(winid, 14), WindowInfo(winid, 15)

	local str = "!"

  str = str.."|-|Bring to Front"

  str = str.."|-|Send to Back"

	opt = WindowMenu(winid, x, y, str)

	if opt == "" then
		return
	end

	opt = tonumber(opt)

if opt == 1 then -- Bring to Front
        CallPlugin("462b665ecb569efbf261422f","boostMe", winid)
      --  print("Bring to Front")
        SaveState()
elseif opt == 2 then -- Send to back
        CallPlugin("462b665ecb569efbf261422f","dropMe", winid)
      --  print("Sent to Back")
        SaveState()
      end
	window(true)
end

function CancelMouseOver(flags, id)
	--Note("CancelMouseOver")
	-- nothing
end

function CancelMouseDown(flags, id)
	--Note("CancelMouseDown")
	-- nothing
end

function OnPluginEnable()
	--Note("enabled")
	window(true)
end

function OnPluginDisable()
	WindowDelete(winid)
end

function OnPluginClose()
	WindowDelete(winid)
end


function OnPluginSaveState()
	SetVariable("pos_x", pos_x)
	SetVariable("pos_y", pos_y)
	SetVariable("win_width", win_width)
	SetVariable("win_height", win_height)

end



window(true)


]]>
</script>

</muclient>
